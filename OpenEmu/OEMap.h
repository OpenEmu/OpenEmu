/*
 Copyright (c) 2009, OpenEmu Team
 
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the OpenEmu Team nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY OpenEmu Team ''AS IS'' AND ANY
 EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL OpenEmu Team BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*!
    @header OEMap
    @abstract   OEMap defines an opaque structure associating a key value transmitted from the GUI
 into an emulator-specific-key input. It is used internally by the GameCore class.
    @discussion This header defines the public OEEmulatorKey public structure generated by each cores
 to provide to the GameCore abstract class a mean to callback the subclass implementations. The keys
 are mapped to a value parsed from the GamePad and Keyboard inputs the core is receiving.
*/
#import <Foundation/Foundation.h>

/*!
    @typedef 
    @abstract   Defines a an emulator key specific to the emulator, combining the player number and
 an arbitrary key value.
    @discussion Instances of this structure are generated by each core in response to 
 -emulatorKeyForKey:index:player: and generally represent a value recognized by the underlying core.
    @field      player The player number.
    @field      key The key specific to the core.
*/
typedef struct OEEmulatorKey {
    NSUInteger player;
    NSUInteger key;
} OEEmulatorKey;

#if !defined(OE_INLINE)
#if defined(__GNUC__)
#define OE_INLINE static __inline__ __attribute__((always_inline))
#elif defined(__cplusplus)
#define OE_INLINE static inline
#endif
#endif

/*!
    @function
    @abstract   Creates an OEEmulatorKey from the specified values.
    @result     AN OEEmulatorKey with the player and key values.
*/
OE_INLINE OEEmulatorKey OEMakeEmulatorKey(NSUInteger player, NSUInteger key)
{
    OEEmulatorKey ret;
    ret.player = player;
    ret.key = key;
    return ret;
}

typedef NSInteger     OEMapKey;
typedef OEEmulatorKey OEMapValue;

typedef struct __OEMap *OEMapRef;

/*!
    @function
    @abstract   Creates a new map with the specified starting capacity.
    @discussion The indicated capacity is the initial capacity of the map and can grow as keys are inserted.
    @param      capacity The initial capacity of the map.
    @result     A new empty map with capacity key allocated.
*/
OEMapRef OEMapCreate(size_t capacity);

void OEMapRelease(OEMapRef map);
void OEMapSetValue(OEMapRef map, OEMapKey key, OEMapValue value);
BOOL OEMapGetValue(OEMapRef map, OEMapKey key, OEMapValue *value);
void OEMapRemoveValue(OEMapRef map, OEMapKey key);
void OEMapRemoveMaskedKeysForValue(OEMapRef map, OEMapKey mask, OEMapValue value);
void OEMapSetValueComparator(OEMapRef map, BOOL (*comparator)(OEMapValue, OEMapValue));
void OEMapShowOffContent(OEMapRef map);
