/*
 Copyright (c) 2009, OpenEmu Team
 
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright
 notice, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.
 * Neither the name of the OpenEmu Team nor the
 names of its contributors may be used to endorse or promote products
 derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY OpenEmu Team ''AS IS'' AND ANY
 EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL OpenEmu Team BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//
// Prefix header for all source files of the 'OpenEmu' target in the 'OpenEmu' project
//

#ifdef __OBJC__
#import <Cocoa/Cocoa.h>
#endif

#define BOOL_STR(var) ((var) ? "YES" : "NO")

#ifdef DEBUG_PRINT
#define DLog(format, ...) NSLog(@"%s: " format, __FUNCTION__, ##__VA_ARGS__)
#else
#define DLog(format, ...) do {} while (0)
#endif

#define LogResponderChain(__RESPONDER__) {                                                              \
    NSResponder *responder = __RESPONDER__;                                                             \
    NSMutableString* responderChain = [[NSMutableString alloc] initWithFormat:@"%@", responder];        \
    while ((responder = [responder nextResponder])) {                                                   \
            [responderChain appendString:@" -> "];                                                      \
        [responderChain appendFormat:@"%@", responder];                                                 \
    }                                                                                                   \
    NSLog(@"%@", responderChain);                                                                       \
}

#define OEDBSystemsChangedNotificationName @"OEDBSystemsChanged"

#define OEPreferencesOpenPaneNotificationName @"OEPrefOpenPane"
#define OEPreferencesOpenPanelUserInfoPanelNameKey @"panelName"
#define OEPreferencesOpenPanelUserInfoSystemIdentifierKey @"systemIdentifier"

// Archive.vg Support
#define APIBase		@"http://api.archive.vg"
#define APIVersion	@"2.0"
#define APIKey		@"6CVC46HWMLJNU986TRM5A4XG927HA0K0"

#define UDDebugModeKey @"debug"

// Keys used for user defaults
// Remember to change values in XIBs if you edit strings below!
#define UDSetupAssistantHasRun      @"setupAssistantFinished"   /*  uses Sparkle key, to determine if oe was launched before */
#define UDRemoveCollectionSuppresedKey @"removeCollectionWithoutConfirmation"

#define UDSelectedPreferencesTab	@"selectedPreferencesTab"	/*	selected tab of preferences window	*/

// Preferences, Library tab
#define UDDatabasePathKey			@"databasePath"				/*	path of database folder			*/
#define UDDefaultDatabasePathKey	@"defaultDatabasePath"		/*	default path of database folder */

#define UDOrganizeLibraryKey		@"organizeLibrary"			/*	Preferences -> Library -> Keep Games Organized										*/
#define UDCopyToLibraryKey			@"copyToLibrary"			/*	Preferences -> Library -> Copy files to Game Library folder when adding to Library	*/
#define UDAutmaticallyGetInfoKey	@"automaticallyGetInfo"		/*	Preferences -> Library -> Automatically lookup game information & artwork			*/

// Preferences, Gameplay tab
#define UDVideoFilterKey			@"videoFilter"				/*	Preferences -> Gameplay -> Filter										*/
#define UDVSyncKey					@"vsync"					/*	Preferences -> Gameplay -> Enable V-Sync								*/
#define UDLaunchFullscreenKey		@"fullScreen"				/*	Preferences -> Gameplay -> Always launch games fullscreen				*/
#define UDAllowPopoutKey			@"allowPopout"				/*	Preferences -> Gameplay -> Allow popout gameplay window					*/
#define UDBackgroundPauseKey		@"backgroundPause"			/*	Preferences -> Gameplay -> Always pause gameplay when in background		*/

// OEHudControls
#define UDVolumeKey					@"volume"					/*	GamePlay window -> hud bar -> volume slider start value					*/
#define UDNameStateByDateKey		@"dateName"					/*  skips if true:	Gameplay window -> alert -> state name					*/

// Preferences, Controls tab
#define UDControlsPluginIdentifierKey   @"lastControlsPlugin"
#define UDControlsPlayerKey             @"lastControlsPlayer"
#define UDControlsDeviceTypeKey         @"lastControlsDevice"

// "Hidden" preferences
#define UDRunCoresInBackgroundKey   @"gameCoreInBackgroundThread"
#define UDRegionKey					@"region"					/*	release region (force a region)	*/
#define UDSaveStateFolderNameKey	@"saveStateFolder"			/*  name of save state folder		*/
#define UDHUDFadeOutDelayKey        @"fadeoutdelay"             /*  time until hudcontrolsbar fades out after last mouse movement   */
#define UDMaxSaveGameNameLengthKey  @"MaxSaveGameNameLength"    /*  maximum length of a valid save game name */
#define UDForcePopoutKey			@"forcePopout"
#define UDPopoutHasScreenSizeKey    @"forceDefaultScreenSize"
#define UDUseQuickImportKey			@"UseQuickImport"			/*	skips duplicate verification when importing games if automatic info grabbing is deactivated	*/
#define UDUseMD5HashingKey			@"UseMD5"					/*	use md5 instead of crc32 for rom identification	 (default: YES)								*/
#define UDBoxSizesKey				@"BoxSizes"					/*	Array of sizes used for Box Artwork thumbnails (defaults registered in main.m)				*/
#define UDHUDHideOptionsKey         @"HUDBarWithoutOptions"     /*  Set to yes to disable the cog in the hudbar                                                 */
#define OEHUDCanDeleteStateKey      @"HUDBarCanDeleteState"     /*  Enable to allow users to remove savestates by holding the alt button when clicking on a savestate  */

#define UDControlsDisableMouseSelection @"controlsDisableMouseSelection"        /* if set (to YES) selecting controller buttons by clicking on the image is disabled in Controls Preferences */
#define UDControlsDisableMouseDeactivation @"controlsDisableMouseDeactivation"  /* if set (to YES) deselecting the current button by clicking outside the blue selector ring is disabled in Controls Preferences */
// Sidebar Constraints
#define UDSidebarCollectionNotCollapsableKey    @"sidebarCollapsable"
#define UDSidebarMinWidth                       @"sidebarMinWidth"
#define UDSidebarMaxWidth                       @"sidebarMaxWidth"
#define UDMainViewMinWidth                      @"mainViewMinWidth"

#define UDSaveGameWhenQuitAlertSuppressionKey   @"autosaveOnStopWithoutConfirmation"   /* determines if user sees alert asking to save game on quitting */
#define UDDelteGameAlertSuppressionKey          @"removeStatesWithoutConfirmation"     /* determines if user sees alert asking for confirmation before deleting a save game */
#define UDSaveGameAlertSuppressionKey           @"saveGameWithoutConfirmation"          
#define UDChangeCoreAlertSuppressionKey         @"changeCoreWithoutConfirmation"
#define UDControlsButtonHighlightRollsOver      @"ButtonHighlightRollsOver"  /*  affects Preferences -> Controls: After setting the last button (bottom right) of a console the selection automatically jumps back to the first button (top left), if value is true */
// Keys remembering UI State
#define UDSidebarVisibleKey			@"isSidebarVisible"			/*	sidebar in main window visible	*/
#define UDSidebarWidthKey			@"lastSidebarWidth"			/*	width of main window sidebar	*/
#define UDLastGridSizeKey           @"lastGridSize"
#define UDLastCollectionViewKey     @"lastCollectionView"
#define UDLastPopoutFrameKey        @"lastPopoutFrame"
#define UDLastCollectionSelectedKey @"lastCollectionSelected"

#define UDDefaultCoreMappingKeyPrefix @"defaultCore"
#define UDSystemCoreMappingKeyForSystemIdentifier(_SYSTEM_IDENTIFIER_) [NSString stringWithFormat:@"%@.%@", UDDefaultCoreMappingKeyPrefix, _SYSTEM_IDENTIFIER_]

// Debug Preferences
#define UDDebugDrawControllerMaskKey @"drawControllerMask"
#define UDForceCorePicker            @"forceCorePicker"
#define UDLightStyleGridViewMenu     @"lightStyleGridViewMenu"
//  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  /
//  Default installed, non QTZ based filters names, used to identify filters 
//  (see OEHudControlsBar.m, OEPrefGameplayController.m and OEGameLayer.m)
//  Please note that the stated string must match a shader defined and created in OEGameLayer.m 

#define OEOpenGLFilterNameArray [NSArray arrayWithObjects:@"Linear", @"Nearest Neighbor", @"Scale2xHQ", @"Scale2xPlus", @"Scale4x", @"Scale4xHQ", @"Scale2xBR", @"Scale4xBR", nil]


//  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  /
//  Tags identifying Main Menu items
#pragma mark File Menu
enum {

#pragma mark -
#pragma mark Controls Menu
    MainMenu_Controls_StartGame       = 201,
    MainMenu_Controls_VolumeUp        = 202,
    MainMenu_Controls_VolumeDown      = 203,
    MainMenu_Controls_SaveState       = 204,
    MainMenu_Controls_LoadState       = 205,
    MainMenu_Controls_PauseEmulation  = 206,
    MainMenu_Controls_ResumeEmulation = 207,
#pragma mark -
#pragma mark View Menu
    MainMenu_View_GridViewTag         = 301,
    MainMenu_View_FlowViewTag         = 302,
    MainMenu_View_ListViewTag         = 303,
#pragma mark -
#pragma mark Window Menu
    MainMenu_Window_OpenEmuTag        = 501,
};
