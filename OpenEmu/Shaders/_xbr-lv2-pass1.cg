/*
   Hyllian's xBR LV2 - pass1 Shader
   
   Copyright (C) 2011/2013 Hyllian/Jararaca - sergiogdb@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


   Incorporates some of the ideas from SABR shader. Thanks to Joshua Street.
*/

#define round(X) floor((X)+0.5)

const static float coef           = 2.0;
const static float4 eq_threshold  = float4(15.0, 15.0, 15.0, 15.0);
const static float y_weight        = 48.0;
const static float u_weight        = 7.0;
const static float v_weight        = 6.0;
const static float3x3 yuv          = float3x3(0.299, 0.587, 0.114, -0.169, -0.331, 0.499, 0.499, -0.418, -0.0813);
const static float3x3 yuv_weighted = float3x3(y_weight*yuv[0], u_weight*yuv[1], v_weight*yuv[2]);


float4 df(float4 A, float4 B)
{
	return float4(abs(A-B));
}

float c_df(float3 c1, float3 c2)
{
	float3 df = abs(c1 - c2);
	return df.r + df.g + df.b;
}

bool4 eq(float4 A, float4 B)
{
	return (df(A, B) < eq_threshold);
}

float4 weighted_distance(float4 a, float4 b, float4 c, float4 d, float4 e, float4 f, float4 g, float4 h)
{
	return (df(a,b) + df(a,c) + df(d,e) + df(d,f) + 4.0*df(g,h));
}


float3 remapFrom01(float3 v, float3 low, float3 high)
{
	return round(lerp(low, high, v));
}

float4 unpack_info(float i)
{
	float4 info;
	info.w = round(modf(i/2.0f, i));
	info.z = round(modf(i/2.0f, i));
	info.y = round(modf(i/2.0f, i));
	info.x = i;

	return info;
}

struct orig
{
	float2 tex_coord;
	uniform float2 texture_size;
	uniform sampler2D texture;
};


struct input
{
	float2 video_size;
	float2 texture_size;
	float2 output_size;
	float frame_count;
	float frame_direction;
	float frame_rotation;
};

struct out_vertex {
	float4 position : POSITION;
	float4 color    : COLOR;
	float2 texCoord : TEXCOORD0;
	float4 t1       : TEXCOORD1;
	float4 t2       : TEXCOORD2;
	float4 t3       : TEXCOORD3;
	float2 orig_tex;
};

/*    VERTEX_SHADER    */
void main_vertex
(
	float4 position	: POSITION,
	float4 color	: COLOR,
	float2 texCoord : TEXCOORD0,

   	uniform float4x4 modelViewProj,
	orig ORIG,
	out out_vertex co
)
{
	co.position = mul(modelViewProj, position);
	co.color = color;

	float2 ps = float2(1.0/ORIG.texture_size.x, 1.0/ORIG.texture_size.y);
	float dx = ps.x;
	float dy = ps.y;

	//    A1 B1 C1
	// A0  A  B  C C4
	// D0  D  E  F F4
	// G0  G  H  I I4
	//    G5 H5 I5

	co.texCoord = texCoord;
	co.orig_tex = ORIG.tex_coord;
	co.t1 = ORIG.tex_coord.xyyy + float4(   0, -dy,  0, dy);  //  B
	co.t2 = ORIG.tex_coord.xxxy + float4( -dx,   0, dx,  0);  //D E F
                                                                  //  H
}


/*    FRAGMENT SHADER    */
float4 main_fragment(in out_vertex co, uniform sampler2D decal : TEXUNIT0, orig ORIG, uniform input IN) : COLOR
{

	bool4 px; // px = pixel, edr = edge detection rule
	float4 edr, edr_left, edr_up;
	float4 fx, fx_left, fx_up, final_fx; // inequations of straight lines.
	float3 res1, res2, pix1, pix2;
	float blend1, blend2;

	float2 fp = frac(co.texCoord*IN.texture_size);


	float3 B  = tex2D(ORIG.texture, co.t1.xy).rgb;
	float3 D  = tex2D(ORIG.texture, co.t2.xw).rgb;
	float3 E  = tex2D(ORIG.texture, co.t2.yw).rgb;
	float3 F  = tex2D(ORIG.texture, co.t2.zw).rgb;
	float3 H  = tex2D(ORIG.texture, co.t1.xw).rgb;


	float4 b = mul( float4x3(B, D, H, F), yuv_weighted[0] );
	float4 e = mul( float4x3(E, E, E, E), yuv_weighted[0] );
	float4 d = b.yzwx;
	float4 f = b.wxyz;
	float4 h = b.zwxy;

	float4 Ao = float4( 1.0, -1.0, -1.0, 1.0 );
	float4 Bo = float4( 1.0,  1.0, -1.0,-1.0 );
	float4 Co = float4( 1.5,  0.5, -0.5, 0.5 );
	float4 Ax = float4( 1.0, -1.0, -1.0, 1.0 );
	float4 Bx = float4( 0.5,  2.0, -0.5,-2.0 );
	float4 Cx = float4( 1.0,  1.0, -0.5, 0.0 );
	float4 Ay = float4( 1.0, -1.0, -1.0, 1.0 );
	float4 By = float4( 2.0,  0.5, -2.0,-0.5 );
	float4 Cy = float4( 2.0,  0.0, -1.0, 0.5 );

	// These inequations define the line below which interpolation occurs.
	fx      = (Ao*fp.y+Bo*fp.x); 
	fx_left = (Ax*fp.y+Bx*fp.x);
	fx_up   = (Ay*fp.y+By*fp.x);

        float2 delta = float2(IN.video_size.x/IN.output_size.x, 0.5*IN.video_size.x/IN.output_size.x);

	float4 fx45 = saturate((fx      + delta.xxxx -Co)/(2*delta.xxxx));
	float4 fx30 = saturate((fx_left + delta.yxyx -Cx)/(2*delta.yxyx));
	float4 fx60 = saturate((fx_up   + delta.xyxy -Cy)/(2*delta.xyxy));

	float4 info  = tex2D(decal, co.texCoord);

	float3 i = remapFrom01(info.xyz, float3(0.0f, 0.0f, 0.0f), float3(255.0f, 255.0f, 255.0f));

	edr      = unpack_info(i.x);
	edr_left = unpack_info(i.y);
	edr_up   = unpack_info(i.z);

	fx45 = edr*fx45;
	fx30 = edr_left*fx30;
	fx60 = edr_up*fx60;

	px = (df(e,f) <= df(e,h));

	float4 maximo = max(max(fx30, fx60), fx45);

        float4x3 pix = float4x3(lerp(E, lerp(H, F, px.x), maximo.x), lerp(E, lerp(F, B, px.y), maximo.y), lerp(E, lerp(B, D, px.z), maximo.z), lerp(E, lerp(D, H, px.w), maximo.w));
	float4 pixel = mul( pix, yuv_weighted[0] );
	

	float4 diff = df(pixel,e);

	float3 res = pix[0];
	float mx = diff.x;

        if (diff.y > mx) {res = pix[1]; mx = diff.y;}
        if (diff.z > mx) {res = pix[2]; mx = diff.z;}
        if (diff.w > mx) {res = pix[3];}


	return float4(res, 1.0);
}


